//单个用户批量开课接口
    public function <%=oper.$.name%>(Request $request)
    {
        $validator = Validator::make($request->all(), [
            'user_id' => 'required|integer|min:0',
            'invoice_title' => 'string|max:32',
            'tax_no' => 'string|max:32',
            'invoice_type' => 'string|max:32',
            'invoice_email' => 'string|email',
            'invoice_address' => 'string|max:200',
            'GEN_CODE' => 'string|max:200',
            'pay_date' => 'date',
            'products' => 'required',
        ]);
        if ($validator->fails()) {
            return $this->fails($validator->errors()->all());
        }

        $input_product_ids = json_decode($request->input('products'));

        //判断是否重复购买
        $pay_products = DB::table('orders')->select([
            'purchased.product_name as proudct_name',
            'purchased.product_id as product_id'
            ])
            ->leftJoin('purchased', 'purchased.order_id', '=', 'orders.id')
            ->where('orders.owner_id', '=', $request->input('user_id'))
            ->where('orders.state', '=', 2)
            ->whereIn('purchased.product_id', $input_product_ids)
            ->get();

        if($pay_products != null){
            return $this->fails($pay_products);
        }

        $products = DB::table("products")->whereIn("id", $input_product_ids);
        $parentId = DB::table('orders')
            ->insertGetId([
                'owner_id' => $request->input('user_id'),
                'pay_type' => 3,
                'invoice_title' => $request->input('invoice_title'),
                'tax_no' => $request->input('tax_no'),
                'invoice_type' => $request->input('invoice_type'),
                'invoice_email' => $request->input('invoice_email'),
                'invoice_address' => $request->input('invoice_address'),
                'total' => $products->sum("price"),
                'shop_id' => $this->token->shop_id,
                'code' => date('YmdHis') . time() . mt_rand(1000, 9999),
                'state' => 2,
                'pay_date' => $request->input('pay_date'),
                'created_at' => date('Y-m-d H:i:s'),
                'updated_at' => date('Y-m-d H:i:s')
            ]);
        $products = $products->get();

        for ($i = 0; $i < count($products); $i++) {
            DB::table('purchased')
                ->insert([
                    'order_id' => $parentId,
                    'product_id' => $products[$i]->id,
                    'product_name' => $products[$i]->name,
                    'price' => $products[$i]->price,
                    'is_first' => $request->input('is_first'), //TODO这里手写加is_first
                    'created_at' => date('Y-m-d H:i:s'),
                    'updated_at' => date('Y-m-d H:i:s')
                ]);
        }
        return $this->success($parentId);
    }